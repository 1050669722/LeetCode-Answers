9题解：非常量空间 溢出 反转int数字的一半 临界情况 时间复杂度：O(\log_{10}(n))O(log 
10
?	
 (n))，对于每次迭代，我们会将输入除以10，因此时间复杂度为 O(\log_{10}(n))O(log 
10
?	
 (n))。空间复杂度：O(1)O(1)

指针、链表 这些基本概念和数据结构很重要 可以帮助构建良好的基础算法

在这样的环境下，还是少去调库

分治、递归、空间换时间 等一系列名词

关联 取消关联 重新赋值 改变部分属性

循环搜索 二分查找

四数和拆成两个两数和O(n)，用哈希表做，如果是排序加指针O(n^3)；一个整数n，拆成m份，时间复杂度？
没有限定范围不好拆，情况太多

#在循环内改循环条件要注意条件限制

传输矩阵只计算一次，保存在属性里，供以后调用（GS循环中，总不能每轮循环都计算一次传输矩阵）。
所以只有遇到这样大规模数据的时候，问题暴露得才会明显，才会想到每轮循环做了重复的事情，而这是可以通过一定的空间占用优化的，这样的空间占用是值得的。

魔法药水问题 信息论 编码

学以致用比多学习更重要。

指针不受循环代数的影响，条件可以自行添加。

json

汉明距离是使用在数据传输差错控制编码里面的，汉明距离是一个概念，它表示两个（相同长度）字对应位不同的数量，我们以d（x,y）表示两个字x,y之间的汉明距离。对两个字符串进行异或运算，并统计结果为1的个数，那么这个数就是汉明距离。

寻找数组等问题的特征，也许不是通法，但有时很巧妙。

递归代码思路清晰易懂，也容易写出来，但性能相对较差，因为递归次数有限（递归的数据不断压入栈中，容易造成栈溢出）

所以，递归和栈迭代是等价的

方法五：Manacher 算法
还有一个复杂度为 O(n)O(n) 的 Manacher 算法。然而，这是一个非同寻常的算法，在 45 分钟的编码时间内提出这个算法将会是一个不折不扣的挑战。理解它，我保证这将是非常有趣的。
最大回文子串。

Dynamic Programming
动态规划中存在状态转移方程
状态定义
边界条件
状态转移方程

如果要调试很多遍，一定是方法不好
一个列表就像一种映射。

指针，指针移动的条件

递归 和 栈 的相互转化
递归返回的边界条件


